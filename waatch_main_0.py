#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI_JTAG_UART_Demo_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtWidgets import *
from PyQt5.QtWidgets import QMainWindow,QApplication
from PyQt5.QtWidgets import QWidget, QApplication
from WATCH_3 import *
from PyQt5.QtCore import *
import threading
import time


def threaded(fn):
    def wrapper(*args, **kwargs):
        thread = threading.Thread(target=fn, args=args, kwargs=kwargs)
        thread.start()
        return thread
    return wrapper


class MiApp(QMainWindow):
    def __init__(self):
        super().__init__()                                  # Ссылаемся на родительский класс для наследованиня атрибуток класса
        global isStart, startTime
        isStart = False
        startTime = 0
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setWindowFlags(Qt.FramelessWindowHint)     # Убрать Windows рамки
        self.setWindowFlag(Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setAttribute(Qt.WA_NoMousePropagation, False)
        self.ui.pushButton.clicked.connect(self.start)
        self.ui.pushButton_2.clicked.connect(self.reset)

    def start(self):
        global isStart, startTime
        isStart = True
        startTime = time.time()

    def reset(self):
        global isStart
        isStart = False

    def timerFunction(self):
        global isStart, startTime
        if isStart:
            time_r = int(time.time() - startTime)
            hours = time_r // 3600
            minutes = (time_r % 3600) // 60
            seconds = time_r % 60

            if hours > 9:
                isStart = False
            else:
                hours = str(hours); minutes = str(minutes); seconds = str(seconds)
                time_str = '0'*(2-len(hours))+hours+':'+'0'*(2-len(minutes))+minutes+':'+'0'*(2-len(seconds))+seconds
                self.ui.Time.setText(time_str)



    # def index_0(self):
    #     global a
    #     a = 1
    #
    # def index_1(self):
    #     global a
    #     a = 0
    #
    # @threaded
    # def time(self):
    #     s = 0
    #     m = 0
    #     h = 0
    #     if a == 1:
    #         for s in range(0, 10):
    #             self.ui.lcdNumber_3.display(s)
    #             self.ui.lcdNumber_2.display(m)
    #             self.ui.lcdNumber_4.display(h)
    #             if s < 10:
    #                 s += 1
    #                 time.sleep(1)
    #             if s > 9:
    #                 s = 0
    #                 if m < 10:
    #                     m += 1
    #                 if m > 9:
    #                     m = 0
    #                     h += 1
    #                     if h > 23:
    #                         s=0
    #                         m=0
    #                         h = 0
    #         else:
    #             pass









    # Обработка событий мыши
    #     # <MainWindow Properties>
    #     self.setFixedSize(320, 450)
    #     self.setStyleSheet("QMainWindow{background-color: darkgray;border: 1px solid black}")
    #     self.setWindowFlags(Qt.FramelessWindowHint)
    #     self.center()
    #     # </MainWindow Properties>

        # # <Label Properties>
        # self.lbl = QLabel(self)
        # self.lbl.setText("test")
        # self.lbl.setStyleSheet(
        #     "QLabel{background-color: rgb(0,0,0); border: 1px solid red; color: rgb(255,255,255); font: bold italic 20pt 'Times New Roman';}")
        # self.lbl.setGeometry(5, 5, 60, 40)
        # # </Label Properties>

        # self.oldPos = self.pos()
        # self.show()

    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def mousePressEvent(self, event):
        self.oldPos = event.globalPos()

    def mouseMoveEvent(self, event):
        delta = QPoint(event.globalPos() - self.oldPos)
        self.move(self.x() + delta.x(), self.y() + delta.y())
        self.oldPos = event.globalPos()

        # Закрытие на кнопку Escape

    def keyReleaseEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()
        super().keyReleaseEvent(event)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    w = MiApp()
    w.show()
    timer = QtCore.QTimer()
    timer.timeout.connect( w.timerFunction)
    timer.start(100)
    sys.exit(app.exec_())